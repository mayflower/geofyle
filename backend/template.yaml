AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GeoFyle - location-based file sharing backend

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs14.x
    MemorySize: 256
    Environment:
      Variables:
        FILES_TABLE: !Ref FilesTable
        FILES_BUCKET: !Ref FilesBucket
        MAX_FILE_SIZE_BYTES: 5242880  # 5MB
        DEFAULT_RADIUS_METERS: 100
        FILE_RETENTION_DAYS: 30
        API_BASE_URL: !Sub "https://${GeoFyleApi}.execute-api.${AWS::Region}.amazonaws.com/v1"

Resources:
  # API Gateway
  GeoFyleApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowMethods: "'GET, POST, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: JwtAuthorizer
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn

  # Lambda Functions
  GetNearbyFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/getNearbyFiles.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FilesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /files
            Method: get

  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/uploadFile.handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref FilesTable
        - S3CrudPolicy:
            BucketName: !Ref FilesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /files
            Method: post

  GetFileDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/getFileDetails.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FilesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /files/{fileId}
            Method: get

  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/deleteFile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FilesTable
        - S3CrudPolicy:
            BucketName: !Ref FilesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /files/{fileId}
            Method: delete

  DownloadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/downloadFile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FilesTable
        - S3ReadPolicy:
            BucketName: !Ref FilesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /files/{fileId}/download
            Method: get

  CleanupExpiredFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/cleanupExpiredFiles.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FilesTable
        - S3CrudPolicy:
            BucketName: !Ref FilesBucket
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: DailyCleanupSchedule
            Description: Scan for and remove expired files daily

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: middleware/authorizer.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable

  AuthenticateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/authenticateUser.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref GeoFyleApi
            Path: /users/authenticate
            Method: post
            Auth:
              Authorizer: NONE

  # DynamoDB Tables
  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: geohash
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GeohashIndex
          KeySchema:
            - AttributeName: geohash
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH

  # S3 Bucket
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldFiles
            Status: Enabled
            ExpirationInDays: 31  # One day buffer after DynamoDB expiration

  # Bucket Policy
  FilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FilesBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Effect: Allow
            Resource: !Sub "${FilesBucket.Arn}/*"
            Principal:
              Service: lambda.amazonaws.com

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${GeoFyleApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
  FilesBucket:
    Description: S3 bucket for file storage
    Value: !Ref FilesBucket
  FilesTable:
    Description: DynamoDB table for file metadata
    Value: !Ref FilesTable